"use strict";(self.webpackChunksite=self.webpackChunksite||[]).push([[119],{4239:(e,n,i)=>{i.d(n,{A:()=>s});const s=i.p+"assets/images/arch-94bbbc1174a0fc3055c6c33d1a27aee0.png"},8453:(e,n,i)=>{i.d(n,{R:()=>l,x:()=>o});var s=i(6540);const r={},t=s.createContext(r);function l(e){const n=s.useContext(t);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),s.createElement(t.Provider,{value:n},e.children)}},9647:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>l,metadata:()=>s,toc:()=>a});const s=JSON.parse('{"id":"bridge","title":"Bridge","description":"The StaticMCP Bridge is the critical component that enables standard MCP clients to seamlessly interact with static file-based context servers. Acting as a lightweight translation layer, the bridge converts real-time MCP requests into file system operations, making static pre-generated content appear as a fully dynamic MCP server.","source":"@site/docs/bridge.md","sourceDirName":".","slug":"/bridge","permalink":"/docs/bridge","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"defaultSidebar","previous":{"title":"Alternatives","permalink":"/docs/comparison"}}');var r=i(4848),t=i(8453);const l={},o="Bridge",c={},a=[{value:"Architecture Role",id:"architecture-role",level:2},{value:"Transport Support",id:"transport-support",level:2},{value:"JSON-RPC over Stdio",id:"json-rpc-over-stdio",level:3},{value:"HTTP Transport",id:"http-transport",level:3},{value:"Server-Sent Events (SSE)",id:"server-sent-events-sse",level:3},{value:"Core Responsibilities",id:"core-responsibilities",level:2},{value:"Protocol Translation",id:"protocol-translation",level:3},{value:"Request Routing",id:"request-routing",level:3},{value:"Error Handling",id:"error-handling",level:3},{value:"Caching Integration",id:"caching-integration",level:3},{value:"Implementation Approaches",id:"implementation-approaches",level:2},{value:"Standalone Servers",id:"standalone-servers",level:3},{value:"Embedded Libraries",id:"embedded-libraries",level:3},{value:"Serverless Functions",id:"serverless-functions",level:3},{value:"Proxy Services",id:"proxy-services",level:3},{value:"Configuration Options",id:"configuration-options",level:2},{value:"Source Location",id:"source-location",level:3},{value:"Performance Tuning",id:"performance-tuning",level:3},{value:"Security Features",id:"security-features",level:3},{value:"Types",id:"types",level:2},{value:"STDIO",id:"stdio",level:3},{value:"Fixed SSE",id:"fixed-sse",level:3},{value:"Dynamic SSE",id:"dynamic-sse",level:3},{value:"Standard Compliance",id:"standard-compliance",level:2},{value:"Extensions",id:"extensions",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"bridge",children:"Bridge"})}),"\n",(0,r.jsx)(n.p,{children:"The StaticMCP Bridge is the critical component that enables standard MCP clients to seamlessly interact with static file-based context servers. Acting as a lightweight translation layer, the bridge converts real-time MCP requests into file system operations, making static pre-generated content appear as a fully dynamic MCP server."}),"\n",(0,r.jsx)(n.h2,{id:"architecture-role",children:"Architecture Role"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{src:i(4239).A+"",width:"1458",height:"502"})}),"\n",(0,r.jsx)(n.p,{children:"The bridge serves as the interface between two worlds:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"MCP Protocol Side"}),": Handles standard MCP requests from AI models and applications via JSON-RPC over stdio, HTTP, or SSE"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Static File Side"}),": Translates requests into appropriate file paths and HTTP requests"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"This separation allows StaticMCP to leverage the full power of modern web infrastructure while maintaining complete compatibility with existing MCP tooling."}),"\n",(0,r.jsx)(n.h2,{id:"transport-support",children:"Transport Support"}),"\n",(0,r.jsx)(n.p,{children:"StaticMCP bridges can implement any of the standard MCP transport mechanisms:"}),"\n",(0,r.jsx)(n.h3,{id:"json-rpc-over-stdio",children:"JSON-RPC over Stdio"}),"\n",(0,r.jsx)(n.p,{children:"Traditional command-line bridges that communicate via standard input/output:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Ideal for development tools and local testing"}),"\n",(0,r.jsx)(n.li,{children:"Compatible with MCP Inspector and development environments"}),"\n",(0,r.jsx)(n.li,{children:"Simple process-based isolation and debugging"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"http-transport",children:"HTTP Transport"}),"\n",(0,r.jsx)(n.p,{children:"RESTful bridges that expose MCP operations as HTTP endpoints:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Native web integration for browser-based clients"}),"\n",(0,r.jsx)(n.li,{children:"Standard HTTP status codes and headers"}),"\n",(0,r.jsx)(n.li,{children:"Easy integration with existing web infrastructure"}),"\n",(0,r.jsx)(n.li,{children:"Support for CORS and web security policies"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"server-sent-events-sse",children:"Server-Sent Events (SSE)"}),"\n",(0,r.jsx)(n.p,{children:"Real-time bridges using SSE for bi-directional communication:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Efficient for long-running connections"}),"\n",(0,r.jsx)(n.li,{children:"Built-in reconnection and error handling"}),"\n",(0,r.jsx)(n.li,{children:"Ideal for web applications requiring live updates"}),"\n",(0,r.jsx)(n.li,{children:"Lower latency than traditional HTTP polling"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"core-responsibilities",children:"Core Responsibilities"}),"\n",(0,r.jsx)(n.h3,{id:"protocol-translation",children:"Protocol Translation"}),"\n",(0,r.jsx)(n.p,{children:"The bridge's primary function is converting MCP operations into file system requests:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Resource Requests"}),": Map ",(0,r.jsx)(n.code,{children:"resources/read"})," calls to specific JSON files in the ",(0,r.jsx)(n.code,{children:"resources/"})," directory"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Tool Calls"}),": Transform ",(0,r.jsx)(n.code,{children:"tools/call"})," requests into lookups in the ",(0,r.jsx)(n.code,{children:"tools/"})," hierarchy"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Capability Discovery"}),": Serve manifest information from the root ",(0,r.jsx)(n.code,{children:"mcp.json"})," file"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"request-routing",children:"Request Routing"}),"\n",(0,r.jsx)(n.p,{children:"Bridges implement intelligent routing logic to map complex requests to static files:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'MCP Request: resources/read { uri: "file://README.md" }\n\u2193\nFile Path: resources/README.md.json\n\u2193\nHTTP Request: GET https://cdn.example.com/resources/README.md.json\n'})}),"\n",(0,r.jsx)(n.h3,{id:"error-handling",children:"Error Handling"}),"\n",(0,r.jsx)(n.p,{children:"Professional error handling ensures graceful degradation:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"File Not Found"}),": Convert 404 errors into appropriate MCP error responses"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Network Issues"}),": Handle connectivity problems with service unavailable errors"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Invalid Content"}),": Validate JSON responses and handle parsing errors"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"caching-integration",children:"Caching Integration"}),"\n",(0,r.jsx)(n.p,{children:"Bridges can implement sophisticated caching strategies:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Local Caching"}),": Store frequently accessed files in memory or local storage"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"HTTP Caching"}),": Respect and leverage standard HTTP cache headers"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"CDN Integration"}),": Work seamlessly with content delivery networks"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"implementation-approaches",children:"Implementation Approaches"}),"\n",(0,r.jsx)(n.h3,{id:"standalone-servers",children:"Standalone Servers"}),"\n",(0,r.jsx)(n.p,{children:"Independent bridge applications that run as separate processes:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Stdio Bridges"}),": Accept MCP requests via standard input/output for command-line tools"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Streamable HTTP Servers"}),": Provide single-endpoint HTTP bridges for modern web clients"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Legacy HTTP+SSE Servers"}),": Support deprecated dual-endpoint pattern for backward compatibility"]}),"\n",(0,r.jsx)(n.li,{children:"Handle requests to static file hosts"}),"\n",(0,r.jsx)(n.li,{children:"Suitable for development and testing environments"}),"\n",(0,r.jsx)(n.li,{children:"Can be written in any programming language"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"embedded-libraries",children:"Embedded Libraries"}),"\n",(0,r.jsx)(n.p,{children:"Bridge functionality integrated directly into MCP client applications:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Eliminate network overhead between client and bridge"}),"\n",(0,r.jsx)(n.li,{children:"Enable advanced caching and optimization strategies"}),"\n",(0,r.jsx)(n.li,{children:"Provide tighter integration with application logic"}),"\n",(0,r.jsx)(n.li,{children:"Ideal for production deployments"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"serverless-functions",children:"Serverless Functions"}),"\n",(0,r.jsx)(n.p,{children:"Cloud-hosted bridges deployed as serverless functions:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Automatically scale with demand"}),"\n",(0,r.jsx)(n.li,{children:"Integrate with cloud storage and CDN services"}),"\n",(0,r.jsx)(n.li,{children:"Provide geographic distribution for global applications"}),"\n",(0,r.jsx)(n.li,{children:"Reduce operational overhead"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"proxy-services",children:"Proxy Services"}),"\n",(0,r.jsx)(n.p,{children:"Bridge services that sit between multiple clients and static hosts:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Share cached content across multiple MCP clients"}),"\n",(0,r.jsx)(n.li,{children:"Implement advanced rate limiting and authentication"}),"\n",(0,r.jsx)(n.li,{children:"Provide monitoring and analytics capabilities"}),"\n",(0,r.jsx)(n.li,{children:"Support multi-tenant scenarios"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"configuration-options",children:"Configuration Options"}),"\n",(0,r.jsx)(n.h3,{id:"source-location",children:"Source Location"}),"\n",(0,r.jsx)(n.p,{children:"Bridges support multiple source types for maximum flexibility:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Local File System"}),": Direct access to local directories for development"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"HTTP/HTTPS URLs"}),": Remote static hosting for production deployments"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Cloud Storage"}),": Integration with AWS S3, Google Cloud Storage, etc."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"CDN Endpoints"}),": Direct connection to content delivery networks"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"performance-tuning",children:"Performance Tuning"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Connection Pooling"}),": Reuse HTTP connections for improved performance"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Concurrent Requests"}),": Handle multiple simultaneous requests efficiently"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Timeout Configuration"}),": Appropriate timeouts for different network conditions"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Retry Logic"}),": Intelligent retry strategies for transient failures"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"security-features",children:"Security Features"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"HTTPS Enforcement"}),": Ensure secure communication with static hosts"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Access Control"}),": Implement authentication and authorization where needed"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Input Validation"}),": Sanitize requests to prevent security vulnerabilities"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Rate Limiting"}),": Protect against abuse and ensure fair resource usage"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"types",children:"Types"}),"\n",(0,r.jsx)(n.h3,{id:"stdio",children:"STDIO"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"npx @modelcontextprotocol/inspector staticmcp_stdio_bridge ./my-static-mcp/\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Checkout ",(0,r.jsx)(n.a,{href:"https://github.com/StaticMCP/stdio_bridge",children:(0,r.jsx)(n.code,{children:"stdio_bridge"})})," for more details"]}),"\n",(0,r.jsx)(n.h3,{id:"fixed-sse",children:"Fixed SSE"}),"\n",(0,r.jsx)(n.p,{children:"On the hosting server, start the SSE server to host the StaticMCP files (which partially looses the benefit of it being static)."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"staticmcp_sse_fixed ./my-static-mcp/\nstaticmcp_sse_fixed https://staticmcp.com/mcp/\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Checkout ",(0,r.jsx)(n.a,{href:"https://github.com/StaticMCP/sse_bridge",children:(0,r.jsx)(n.code,{children:"staticmcp_sse_bridge"})})," for more details."]}),"\n",(0,r.jsx)(n.h3,{id:"dynamic-sse",children:"Dynamic SSE"}),"\n",(0,r.jsx)(n.p,{children:"Use a dynamic\xa0SSE bridge that takes in the url to the StaticMCP files as param."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"https://bridge.staticmcp.com/sse?url=https://staticmcp.com/mcp/"})}),"\n",(0,r.jsxs)(n.p,{children:["Checkout ",(0,r.jsx)(n.a,{href:"https://github.com/StaticMCP/sse_bridge",children:(0,r.jsx)(n.code,{children:"staticmcp_sse_bridge"})})," for more details."]}),"\n",(0,r.jsx)(n.h2,{id:"standard-compliance",children:"Standard Compliance"}),"\n",(0,r.jsx)(n.p,{children:"StaticMCP bridges maintain strict compatibility with MCP specifications across all transport methods:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Protocol Versions"}),": Support for current MCP protocol versions"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Transport Flexibility"}),": JSON-RPC over stdio, Streamable HTTP, or legacy HTTP+SSE transports"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Message Format"}),": Full compliance with MCP message schemas"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Error Codes"}),": Standard MCP error codes and message formats"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Response Format"}),": Exact adherence to MCP response schemas"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"This ensures that any MCP client can work with StaticMCP without modification, regardless of the chosen transport mechanism."}),"\n",(0,r.jsx)(n.h2,{id:"extensions",children:"Extensions"}),"\n",(0,r.jsx)(n.p,{children:"TBD"})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}}}]);