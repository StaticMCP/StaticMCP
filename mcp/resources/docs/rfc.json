{
  "contents": [
    {
      "uri": "docs://docs/rfc",
      "mimeType": "text/markdown",
      "text": "# RFC\n\n## StaticMCP - Static Model Context Protocol\n\n**Version:** 0.1\n\n**Status:** Draft  \n\n**Date:** 2025-08-06\n\n## Abstract\n\nThis document defines StaticMCP, an extension to the Model Context Protocol (MCP) that enables serving AI model context through pre-generated static files rather than dynamic server applications. StaticMCP maintains full compatibility with the MCP specification while offering significant improvements in performance, cost, scalability, and deployment simplicity.\n\n## 1. Introduction\n\n### 1.1 Background\n\nThe Model Context Protocol (MCP) provides a standardized interface for AI models to interact with external tools and resources. However, many use cases involve serving relatively static data that doesn't require real-time computation or database queries. Traditional MCP implementations in these scenarios introduce unnecessary complexity and operational overhead.\n\n### 1.2 Motivation\n\nStaticMCP addresses several key challenges:\n\n- **Performance**: Eliminates runtime computation for faster response times\n- **Cost**: Reduces infrastructure requirements to static file hosting\n- **Reliability**: Removes server-side failure points and scaling bottlenecks\n- **Simplicity**: Enables deployment to any static hosting platform\n- **Caching**: Leverages existing web caching infrastructure at all levels\n\n### 1.3 Scope\n\nThis RFC defines:\n- The StaticMCP file structure and organization\n- Mapping between MCP operations and static file paths\n- Bridge server requirements and behavior\n- Compatibility requirements with existing MCP clients\n\n## 2. Architecture Overview\n\n### 2.1 Core Principles\n\nStaticMCP operates on four fundamental principles:\n\n1. **Pre-computation**: All responses are generated at build time\n2. **File-based mapping**: MCP operations map directly to file system paths\n3. **Standard compliance**: Full compatibility with MCP protocol semantics\n4. **Web-native**: Leverages standard HTTP caching and CDN capabilities\n\n### 2.2 System Components\n\n![](@site/static/img/sys_comp.png)\n\n1. **Generator Tools**: Scripts/applications that create static files\n2. **Build Process**: Orchestrates file generation and validation\n3. **Static File Host**: Standard web server or CDN hosting JSON files\n4. **StaticMCP Bridge**: Lightweight proxy translating MCP to HTTP requests\n5. **MCP Client**: Standard MCP client (AI models, applications)\n\n## 3. File Structure Specification\n\n### 3.1 Directory Layout\n\n```\nstaticmcp-root/\n  ├── mcp.json                     # Server manifest\n  ├── resources/                   # Resource responses\n  │     ├── {encoded-uri}.json     # Individual resource files\n  │     └── index.json             # Resource listing\n  └── tools/                       # Tool call responses\n        └── {tool-name}/           # Tool-specific directory\n              └── {arg}.json       # Parameterized responses\n```\n\n### 3.2 Manifest File (mcp.json)\n\nThe root manifest file defines server capabilities:\n\n```json\n{\n  \"protocolVersion\": \"2025-06-18\",\n  \"serverInfo\": {\n    \"name\": \"My StaticMCP Server\",\n    \"version\": \"1.0.0\"\n  },\n  \"capabilities\": {\n    \"resources\": [\n      {\n        \"uri\": \"file://README.md\",\n        \"name\": \"Project README\",\n        \"description\": \"Main project documentation\",\n        \"mimeType\": \"text/markdown\"\n      }\n    ],\n    \"tools\": [\n      {\n        \"name\": \"search\",\n        \"description\": \"Search through project content\",\n        \"inputSchema\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"query\": {\n              \"type\": \"string\",\n              \"description\": \"Search query\"\n            }\n          },\n          \"required\": [\"query\"]\n        }\n      }\n    ]\n  }\n}\n```\n\n## 4. Request Mapping\n\n### 4.1 Resource Requests\n\nMCP resource requests map to files in the `resources/` directory:\n\n| MCP Request | File Path |\n|-------------|-----------|\n| `resources/read` with URI `file://README.md` | `resources/README.md.json` |\n| `resources/read` with URI `web://docs/api` | `resources/docs/api.json` |\n\n#### 4.1.1 URI Encoding Rules\n\nStaticMCP uses a standardized filename encoding convention to ensure consistent, predictable filenames across all implementations. See the [Filename Encoding Convention](standard#3-filename-encoding-convention) in the standard specification for complete details.\n\nBasic encoding rules:\n1. Remove everything before `://` (inclusive)\n2. `/` refers to directory structure\n3. Apply StaticMCP filename encoding (Unicode normalization, lowercase, safe characters only)\n4. Handle long filenames with truncation and hashing\n\n### 4.2 Tool Requests\n\nTool calls map to files in the `tools/{tool-name}/` directory:\n\n| Tool Call | File Path |\n|-----------|-----------|\n| `search(\"rust\")` | `tools/search/rust.json` |\n\n## 5. Response Format\n\n### 5.1 Resource Response Files\n\n```json\n{\n  \"uri\": \"file://README.md\",\n  \"mimeType\": \"text/markdown\",\n  \"text\": \"# My Project\\n\\nThis is the project README...\"\n}\n```\n\n### 5.2 Tool Response Files\n\n```json\n{\n  \"content\": [\n    {\n      \"type\": \"text\",\n      \"text\": \"Found 3 results for 'rust':\\n1. Rust implementation guide\\n2. Rust vs Python comparison\\n3. Memory safety in Rust\"\n    }\n  ]\n}\n```\n\n## 6. Bridge Server Specification\n\n### 6.1 Requirements\n\nThe StaticMCP bridge server MUST:\n\n1. Accept standard MCP JSON-RPC requests\n2. Translate requests to appropriate file paths\n3. Return standard MCP responses\n4. Handle file not found cases gracefully\n5. Support proper HTTP caching headers\n\n### 6.2 Error Handling\n\n| Scenario | HTTP Status | MCP Response |\n|----------|-------------|--------------|\n| File not found | 404 | Resource/tool not available error |\n| Invalid JSON | 500 | Internal server error |\n| Bridge unavailable | 503 | Service temporarily unavailable |\n\n## 7. Generation Process\n\n### 7.1 Build Pipeline\n\n1. **Data Collection**: Gather source data from various inputs\n2. **Response Generation**: Create individual JSON response files\n3. **Manifest Creation**: Generate the root `mcp.json` file\n4. **Validation**: Verify file structure and JSON validity\n5. **Optimization**: Compress and optimize files for delivery\n6. **Deployment**: Upload to static hosting platform\n\n### 7.2 Incremental Updates\n\nFor efficiency, generators SHOULD support incremental builds:\n\n1. Track file modification times\n2. Maintain dependency graphs\n3. Only regenerate changed files\n4. Update manifest with new timestamps\n\n## 8. Security Considerations\n\n### 8.1 File System Safety\n\n- Validate all generated file names to prevent directory traversal\n- Sanitize user input used in file path generation\n- Implement appropriate file size limits\n\n### 8.2 Content Security\n\n- Validate JSON schema compliance for all generated files\n- Implement content scanning for sensitive information\n- Use secure random number generation for parameter hashing\n\n### 8.3 Read-only Access\n\n- Files are read-only and cannot be amended by external request\n- For write access support, consider a hybrid approach\n\n## 9. Performance Considerations\n\n### 9.1 File Organization\n\n- Limit directory fan-out to prevent file system performance issues\n- Use appropriate file naming schemes for efficient lookup\n- Consider file size limits for optimal CDN performance\n\n### 9.2 Caching Strategy\n\n- Implement aggressive caching at all levels\n- Use content-based ETags for cache validation\n- Consider pre-warming CDN caches for frequently accessed files\n\n## 10. Compatibility\n\nStaticMCP implementations MUST maintain full semantic compatibility with the MCP specification. Clients should not be able to distinguish between dynamic and static MCP servers based on response content.\n\n## 11. References\n\n- [Model Context Protocol Specification](https://modelcontextprotocol.io)\n- [JSON-RPC 2.0 Specification](https://www.jsonrpc.org/specification)\n- [RFC 3986: Uniform Resource Identifier (URI)](https://tools.ietf.org/html/rfc3986)\n- [RFC 7234: HTTP/1.1 Caching](https://tools.ietf.org/html/rfc7234)",
      "metadata": {
        "sidebar_position": 1
      }
    }
  ]
}