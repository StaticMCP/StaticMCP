{
  "contents": [
    {
      "uri": "docs://docs/bridge",
      "mimeType": "text/markdown",
      "text": "# Bridge\n\nThe StaticMCP Bridge is the critical component that enables standard MCP clients to seamlessly interact with static file-based context servers. Acting as a lightweight translation layer, the bridge converts real-time MCP requests into file system operations, making static pre-generated content appear as a fully dynamic MCP server.\n\n## Architecture Role\n\n![](@site/static/img/arch.png)\n\nThe bridge serves as the interface between two worlds:\n\n- **MCP Protocol Side**: Handles standard MCP requests from AI models and applications via JSON-RPC over stdio, HTTP, or SSE\n- **Static File Side**: Translates requests into appropriate file paths and HTTP requests\n\nThis separation allows StaticMCP to leverage the full power of modern web infrastructure while maintaining complete compatibility with existing MCP tooling.\n\n## Transport Support\n\nStaticMCP bridges can implement any of the standard MCP transport mechanisms:\n\n### JSON-RPC over Stdio\nTraditional command-line bridges that communicate via standard input/output:\n- Ideal for development tools and local testing\n- Compatible with MCP Inspector and development environments  \n- Simple process-based isolation and debugging\n\n### HTTP Transport\nRESTful bridges that expose MCP operations as HTTP endpoints:\n- Native web integration for browser-based clients\n- Standard HTTP status codes and headers\n- Easy integration with existing web infrastructure\n- Support for CORS and web security policies\n\n### Server-Sent Events (SSE)\nReal-time bridges using SSE for bi-directional communication:\n- Efficient for long-running connections\n- Built-in reconnection and error handling\n- Ideal for web applications requiring live updates\n- Lower latency than traditional HTTP polling\n\n## Core Responsibilities\n\n### Protocol Translation\n\nThe bridge's primary function is converting MCP operations into file system requests:\n\n- **Resource Requests**: Map `resources/read` calls to specific JSON files in the `resources/` directory\n- **Tool Calls**: Transform `tools/call` requests into lookups in the `tools/` hierarchy\n- **Capability Discovery**: Serve manifest information from the root `mcp.json` file\n\n### Request Routing\n\nBridges implement intelligent routing logic to map complex requests to static files:\n\n```\nMCP Request: resources/read { uri: \"file://README.md\" }\n↓\nFile Path: resources/README.md.json\n↓\nHTTP Request: GET https://cdn.example.com/resources/README.md.json\n```\n\n### Error Handling\n\nProfessional error handling ensures graceful degradation:\n\n- **File Not Found**: Convert 404 errors into appropriate MCP error responses\n- **Network Issues**: Handle connectivity problems with service unavailable errors\n- **Invalid Content**: Validate JSON responses and handle parsing errors\n\n### Caching Integration\n\nBridges can implement sophisticated caching strategies:\n\n- **Local Caching**: Store frequently accessed files in memory or local storage\n- **HTTP Caching**: Respect and leverage standard HTTP cache headers\n- **CDN Integration**: Work seamlessly with content delivery networks\n\n## Implementation Approaches\n\n### Standalone Servers\n\nIndependent bridge applications that run as separate processes:\n\n- **Stdio Bridges**: Accept MCP requests via standard input/output for command-line tools\n- **Streamable HTTP Servers**: Provide single-endpoint HTTP bridges for modern web clients\n- **Legacy HTTP+SSE Servers**: Support deprecated dual-endpoint pattern for backward compatibility\n- Handle requests to static file hosts\n- Suitable for development and testing environments\n- Can be written in any programming language\n\n### Embedded Libraries\n\nBridge functionality integrated directly into MCP client applications:\n\n- Eliminate network overhead between client and bridge\n- Enable advanced caching and optimization strategies\n- Provide tighter integration with application logic\n- Ideal for production deployments\n\n### Serverless Functions\n\nCloud-hosted bridges deployed as serverless functions:\n\n- Automatically scale with demand\n- Integrate with cloud storage and CDN services\n- Provide geographic distribution for global applications\n- Reduce operational overhead\n\n### Proxy Services\n\nBridge services that sit between multiple clients and static hosts:\n\n- Share cached content across multiple MCP clients\n- Implement advanced rate limiting and authentication\n- Provide monitoring and analytics capabilities\n- Support multi-tenant scenarios\n\n## Configuration Options\n\n### Source Location\n\nBridges support multiple source types for maximum flexibility:\n\n- **Local File System**: Direct access to local directories for development\n- **HTTP/HTTPS URLs**: Remote static hosting for production deployments\n- **Cloud Storage**: Integration with AWS S3, Google Cloud Storage, etc.\n- **CDN Endpoints**: Direct connection to content delivery networks\n\n### Performance Tuning\n\n- **Connection Pooling**: Reuse HTTP connections for improved performance\n- **Concurrent Requests**: Handle multiple simultaneous requests efficiently\n- **Timeout Configuration**: Appropriate timeouts for different network conditions\n- **Retry Logic**: Intelligent retry strategies for transient failures\n\n### Security Features\n\n- **HTTPS Enforcement**: Ensure secure communication with static hosts\n- **Access Control**: Implement authentication and authorization where needed\n- **Input Validation**: Sanitize requests to prevent security vulnerabilities\n- **Rate Limiting**: Protect against abuse and ensure fair resource usage\n\n## Types\n\n### STDIO\n\n```bash\nnpx @modelcontextprotocol/inspector staticmcp_stdio_bridge ./my-static-mcp/\n```\n\nCheckout [`stdio_bridge`](https://github.com/StaticMCP/stdio_bridge) for more details\n\n### Fixed SSE\n\nOn the hosting server, start the SSE server to host the StaticMCP files (which partially looses the benefit of it being static).\n\n```bash\nstaticmcp_sse_fixed ./my-static-mcp/\nstaticmcp_sse_fixed https://staticmcp.com/mcp/\n```\n\nCheckout [`staticmcp_sse_bridge`](https://github.com/StaticMCP/sse_bridge) for more details.\n\n### Dynamic SSE\n\nUse a dynamic SSE bridge that takes in the url to the StaticMCP files as param.\n\n`https://bridge.staticmcp.com/sse?url=https://staticmcp.com/mcp/`\n\nCheckout [`staticmcp_sse_bridge`](https://github.com/StaticMCP/sse_bridge) for more details.\n\n## Standard Compliance\n\nStaticMCP bridges maintain strict compatibility with MCP specifications across all transport methods:\n\n- **Protocol Versions**: Support for current MCP protocol versions\n- **Transport Flexibility**: JSON-RPC over stdio, Streamable HTTP, or legacy HTTP+SSE transports  \n- **Message Format**: Full compliance with MCP message schemas\n- **Error Codes**: Standard MCP error codes and message formats\n- **Response Format**: Exact adherence to MCP response schemas\n\nThis ensures that any MCP client can work with StaticMCP without modification, regardless of the chosen transport mechanism.\n\n## Extensions\n\nTBD\n"
    }
  ]
}