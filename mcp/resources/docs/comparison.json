{
  "contents": [
    {
      "uri": "docs://docs/comparison",
      "mimeType": "text/markdown",
      "text": "# Alternatives\n\nWhen evaluating StaticMCP, it's important to understand how it differs from other approaches to serving information to AI models. Let's explore the key distinctions.\n\n## StaticMCP vs Regular Static HTML Sites\n\nWhile both involve serving static files, they serve fundamentally different purposes and audiences.\n\n### Static HTML Sites\n- **Purpose**: Human consumption through web browsers\n- **Interface**: Visual presentation with HTML, CSS, JavaScript\n- **Navigation**: Click-through links, search boxes, menus\n- **Content Structure**: Optimized for reading flow and visual hierarchy\n- **Interaction**: Form submissions, user events, DOM manipulation\n\n### StaticMCP\n- **Purpose**: AI model consumption through structured APIs\n- **Interface**: Machine-readable JSON with standardized schemas\n- **Navigation**: Programmatic resource and tool calls\n- **Content Structure**: Optimized for semantic understanding and querying\n- **Interaction**: Function calls with parameters and structured responses\n\n### Key Technical Differences\n\n| Aspect | Static HTML | StaticMCP |\n|--------|-------------|-----------|\n| **Data Format** | HTML/CSS/JS | JSON with MCP schemas |\n| **Access Pattern** | HTTP GET requests | JSON-RPC over HTTP |\n| **Content Discovery** | Sitemaps, crawling | Manifest-driven capabilities |\n| **Parameterization** | Query strings, forms | Tool parameters, resource URIs |\n| **Response Structure** | Unstructured content | Standardized MCP responses |\n\n### Practical Example\n\n**Static HTML approach:**\n```html\n<!-- search.html -->\n<h1>Search Results for \"Python\"</h1>\n<div class=\"result\">\n  <h3>Python Tutorial</h3>\n  <p>Learn Python programming basics...</p>\n</div>\n```\n\n**StaticMCP approach:**\n```json\n// tools/search/python.json\n{\n  \"staticmcp\": {\n    \"type\": \"tool\",\n    \"parameters\": {\"query\": \"python\"}\n  },\n  \"content\": [{\n    \"type\": \"text\", \n    \"text\": \"Found 3 Python resources:\\n1. Python Tutorial - Learn Python programming basics\\n2. Advanced Python - Object-oriented concepts\\n3. Python Web Development - Flask and Django\"\n  }]\n}\n```\n\nThe HTML is designed for human eyes and browser rendering, while StaticMCP provides structured, semantic data that AI models can directly process and reason about.\n\n## StaticMCP vs Knowledge Graphs\n\nKnowledge graphs and StaticMCP serve related but distinct purposes in the AI context ecosystem.\n\n### Knowledge Graphs\n- **Purpose**: Represent relationships between entities as interconnected data\n- **Structure**: Nodes (entities) connected by edges (relationships)  \n- **Query Language**: SPARQL, Cypher, or custom graph traversal\n- **Strength**: Complex reasoning over relationships and inference\n- **Storage**: Graph databases (Neo4j, Amazon Neptune, etc.)\n\n### StaticMCP  \n- **Purpose**: Provide standardized access to tools and resources\n- **Structure**: Discrete resources and parameterized function calls\n- **Query Language**: MCP JSON-RPC protocol\n- **Strength**: Simple, cacheable, web-native deployment\n- **Storage**: Static JSON files on any web server\n\n### Complementary Use Cases\n\nThese approaches often work better together than in competition:\n\n**Knowledge Graph Strengths:**\n- \"What are all the dependencies of Python package X?\"\n- \"Find all papers by authors who collaborated with researchers at Stanford\"  \n- \"What's the relationship between concept A and concept B?\"\n\n**StaticMCP Strengths:**\n- \"Get the contents of this specific document\"\n- \"Search for items matching this query\" \n- \"Execute this tool with these parameters\"\n- \"What resources are available in this context?\"\n\n### Hybrid Architecture Example\n\nYou might use both in a comprehensive AI system:\n\n![](@site/static/img/hybrid-model.png)\n\n**StaticMCP handles:**\n- Document retrieval: `resources/read` for specific files\n- Search results: `tools/search` with pre-computed responses  \n- Simple lookups: Common queries pre-generated as static files\n\n**Knowledge Graph handles:**\n- Complex reasoning: \"Find indirect relationships between X and Y\"\n- Dynamic queries: Novel questions requiring graph traversal\n- Inference: Deriving new facts from existing relationships\n\n### Performance and Cost Comparison\n\n| Factor | Static HTML | StaticMCP | Knowledge Graph |\n|--------|-------------|-----------|-----------------|\n| **Latency** | ~10ms (CDN) | ~10ms (CDN) | ~100-1000ms (DB query) |\n| **Throughput** | Very High | Very High | Medium |\n| **Infrastructure Cost** | $0-5/month | $0-5/month | $100-1000s/month |\n| **Query Complexity** | Low | Medium | Very High |\n| **Reasoning Capability** | None | Limited | Extensive |\n\n### When to Choose What\n\n**Choose Static HTML when:**\n- Building websites for human consumption\n- Need rich visual presentation\n- Interactive user interfaces are primary goal\n\n**Choose StaticMCP when:**\n- Serving structured data to AI models\n- Content is relatively stable (updates hourly/daily)\n- Need maximum performance and minimum cost\n- Want to leverage CDN caching globally\n- Building tools, document access, or search capabilities\n\n**Choose Knowledge Graphs when:**\n- Complex relationships are central to your use case\n- Need real-time inference and reasoning\n- Data is highly interconnected\n- Supporting novel queries that can't be pre-computed\n- Building recommendation engines or discovery systems\n\n**Choose Hybrid Approach when:**\n- Need both fast access to static content AND complex reasoning\n- Want to optimize common queries (StaticMCP) while supporting arbitrary queries (KG)\n- Building comprehensive AI systems with multiple data access patterns\n\n## Real-World Scenarios\n\n### Scenario 1: Personal AI Assistant\n- **StaticMCP**: Resume, project list, personal documents, skills inventory\n- **Knowledge Graph**: Relationships between projects, skills, experiences, career progression\n\n### Scenario 2: Company Documentation\n- **Static HTML**: Public website for human visitors\n- **StaticMCP**: API docs, code examples, FAQ responses for AI consumption  \n- **Knowledge Graph**: Internal relationships between teams, products, technologies\n\n### Scenario 3: Research Database\n- **StaticMCP**: Paper abstracts, author profiles, cached search results\n- **Knowledge Graph**: Citation networks, collaboration patterns, topic relationships\n\n## Architecture Decision Framework\n\nWhen designing an AI context system, consider:\n\n1. **Query Predictability**: Can you pre-compute most responses? → StaticMCP\n2. **Relationship Complexity**: Do you need to traverse complex connections? → Knowledge Graph  \n3. **Update Frequency**: Does data change multiple times per day? → Dynamic system\n4. **Cost Sensitivity**: Is minimizing infrastructure cost important? → StaticMCP\n5. **Performance Requirements**: Do you need sub-10ms responses? → StaticMCP\n6. **Human vs AI Consumption**: Who is the primary audience? → HTML vs StaticMCP\n\nThe key insight is that StaticMCP occupies a sweet spot between simple static sites (too unstructured for AI) and complex knowledge graphs (too expensive/complex for many use cases). It provides AI-optimized structure while maintaining the deployment simplicity and performance characteristics of static web hosting.",
      "metadata": {
        "sidebar_position": 3
      }
    }
  ]
}