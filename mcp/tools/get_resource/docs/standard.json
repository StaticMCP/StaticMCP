{
  "content": [
    {
      "type": "text",
      "text": "{\n  \"uri\": \"docs://docs/standard\",\n  \"name\": \"standard\",\n  \"description\": \"docs content: Untitled\",\n  \"mimeType\": \"text/markdown\",\n  \"content\": \"# Standard\\n\\n## 1. Manifest Standard (mcp.json)\\n\\nThis should be consistent with the existing MCP specifications for the manifest.\\n\\n```json\\n{\\n  \\\"protocolVersion\\\": \\\"YYYY-MM-DD\\\",       // REQUIRED: Protocol version date\\n  \\\"serverInfo\\\": {                        // REQUIRED: Server information\\n    \\\"name\\\": \\\"string\\\",                    // Human-readable server name\\n    \\\"version\\\": \\\"semver\\\"                  // Server version\\n  },\\n  \\\"capabilities\\\": {                      // REQUIRED: Capabilities object\\n    \\\"resources\\\": [                       // REQUIRED: Array of resource definitions\\n      {\\n        \\\"uri\\\": \\\"resume://info\\\",          // REQUIRED: Resource URI\\n        \\\"name\\\": \\\"Personal Information\\\",  // REQUIRED: Human-readable name\\n        \\\"description\\\": \\\"Description\\\",    // REQUIRED: Resource description  \\n        \\\"mimeType\\\": \\\"application/json\\\"   // REQUIRED: MIME type\\n      }\\n    ],\\n    \\\"tools\\\": [                           // REQUIRED: Array of tool definitions\\n      {\\n        \\\"name\\\": \\\"tool_name\\\",             // REQUIRED: Tool name\\n        \\\"description\\\": \\\"Tool purpose\\\",   // REQUIRED: Tool description\\n        \\\"inputSchema\\\": {                 // REQUIRED: Input schema\\n          \\\"type\\\": \\\"object\\\",\\n          \\\"properties\\\": {\\n            \\\"param1\\\": {\\\"type\\\": \\\"string\\\"} // Parameter definitions\\n          },\\n          \\\"required\\\": [\\\"param1\\\"]         // Required parameters\\n        }\\n      }, {\\n        \\\"name\\\": \\\"multi_param_tool_name\\\",             // REQUIRED: Tool name\\n        \\\"description\\\": \\\"Tool purpose\\\",   // REQUIRED: Tool description\\n        \\\"inputSchema\\\": {                 // REQUIRED: Input schema\\n          \\\"type\\\": \\\"object\\\",\\n          \\\"properties\\\": {\\n            \\\"param1\\\": {\\\"type\\\": \\\"string\\\"}, // Parameter definitions\\n            \\\"param2\\\": {\\\"type\\\": \\\"string\\\"} // Parameter definitions\\n          },\\n          \\\"required\\\": [\\\"param1\\\", \\\"param2\\\"]         // Required parameters\\n        }\\n      }\\n    ]\\n  }\\n}\\n```\\n\\n## 2. Directory Structure Standard\\n\\n```\\nstaticmcp-root/\\n  ├── mcp.json                      # REQUIRED: Main manifest\\n  ├── resources/                    # REQUIRED: Resource files\\n  │     └── {encoded-uri}.json\\n  └── tools/                        # REQUIRED: Tool directories\\n        ├── {tool_name}/\\n        │     └──{param1}.json\\n        └── {multi_param_tool_name}/\\n              ├──{param1}\\n              │     └──{param2}.json\\n              └──{param2}           # OPTIONAL: if params are interchangeable\\n                    └──{param1}.json\\n```\\n\\n### File Naming\\n\\nFor the example URIs:\\n\\n1. Remove everything before `://` (inclusive)\\n2. `/` refers to directory\\n3. Keep simple URIs as-is\\n\\nExample mappings:\\n\\n- `resume://info` → `info.json`\\n- `resume://experiences` → `experiences.json`\\n- `resume://skills` → `skills.json`\\n\\n## 3. Filename Encoding Convention\\n\\n### Basic Rules\\n\\n1. **Unicode normalization**: Decompose accented characters (é → e, ñ → n)\\n2. **Lowercase conversion**: All characters converted to lowercase\\n3. **Safe character set**: Keep only a-z, 0-9, -, _\\n4. **Space handling**: Convert spaces to underscores (_)\\n5. **Invalid characters**: Replace all other characters with underscores (_)\\n6. **Length limit**: Maximum 200 characters (leaving room for .json extension)\\n\\n### Long Filename Handling\\n\\nWhen encoded filename exceeds 200 characters:\\n- Take first 183 characters of encoded name\\n- Append _ + 16-character hex hash of original title\\n- Format: `{first_183_chars}_{16_hex_hash}`\\n- Hash is generated from the original (pre-encoded) title for consistency\\n\\n### Examples\\n\\n- `\\\"Hello World\\\"` → `\\\"hello_world\\\"`\\n- `\\\"François Mitterrand\\\"` → `\\\"francois_mitterrand\\\"`\\n- `\\\"COVID-19 pandemic\\\"` → `\\\"covid-19_pandemic\\\"`\\n- `\\\"José María Aznar\\\"` → `\\\"jose_maria_aznar\\\"`\\n- `\\\"King George III\\\"` → `\\\"king_george_iii\\\"`\\n\\n### Implementation Reference\\n\\n```javascript\\nfunction encodeStaticMcpFilename(title) {\\n  // Unicode normalization (remove accents)\\n  const normalized = title.normalize('NFD')\\n    .replace(/[\\\\u0300-\\\\u036f]/g, '');\\n\\n  // Lowercase + safe characters only\\n  const safe = normalized.toLowerCase()\\n    .replace(/[^a-z0-9\\\\-_]/g, '_')\\n    .replace(/\\\\s+/g, '_');\\n\\n  // Handle long filenames\\n  if (safe.length <= 200) return safe;\\n\\n  const hash = hashFunction(title).toString(16).padStart(16, '0');\\n  return safe.substring(0, 183) + '_' + hash;\\n}\\n```\\n\\nThis ensures consistent, predictable filenames across all StaticMCP implementations.\\n\\n## 4. Resource File Response\\n\\n```json\\n{\\n  \\\"uri\\\": \\\"resume://info\\\",                           // REQUIRED: Resource URI\\n  \\\"mimeType\\\": \\\"application/json\\\",                   // REQUIRED: Content type\\n  \\\"text\\\": \\\"{\\\\n  \\\\\\\"name\\\\\\\": \\\\\\\"John Doe\\\\\\\",\\\\n  ...\\\\n}\\\"  // REQUIRED: Content\\n}\\n```\\n\\n## 5. Tool Response\\n\\n```json\\n{\\n  \\\"content\\\": [                        // REQUIRED: Response body\\n    {\\n      \\\"type\\\": \\\"text\\\",                 // REQUIRED: Content type\\n      \\\"text\\\": \\\"[\\\\n  {\\\\n    \\\\\\\"id\\\\\\\": \\\\\\\"rust\\\\\\\",\\\\n    ...\\\\n  }\\\\n]\\\" \\n    }\\n  ],\\n}\\n```\\n\",\n  \"metadata\": {\n    \"sidebar_position\": 2\n  }\n}"
    }
  ]
}